const canvas = document.getElementById('canvas1');
const ctx =canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;
let particleArray = [];
let adjustX = 6;
let adjustY = 0;
ctx.lineWidth = 3;

//handle mouse
const mouse = {
      x : null,
      y :null,
      radius : 150
}

window.addEventListener('mousemove', function(event){
    mouse.x = event.x;
    mouse.y = event.y;
});

ctx.fillstyle = 'white';
ctx.font = '25px Verdana';
ctx.fillText('A', 0, 30);
const textCoordinates = ctx.getImageData( 0, 0, 100, 100);

class Particle{
    constructor(x,y){
        this.x = x;
        this.y = y;
        this.size = 3;
        this.baseX = this.x;
        this.baseY = this.y;
        this.density = (Math.random() * 8) + 1;
        this.distance;
    }
    draw(){
         ctx.fillstyle = 'rgba(225, 225, 225, 0.8)';
         ctx.strokeStyle = 'rgba(34,147,214,1)';
         ctx.beginPath();

         if (this.distance < mouse.radius - 5){
             this.size = 10;
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);    
         }
         else if(this.distance <= mouse.radius){
             this.size = 15;
             ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2); 
         }else{
             this.size = 20;
             ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2); 
         }
         
         ctx.closePath();
         ctx.fill();
    }
    update(){
        let dx = mouse.x - this.x;
        let dy = mouse.y -this.y;
        let distance = Math.sqrt(dx * dx + dy * dy);
        this.distance = distance;
        let forceDirectionX = dx / distance;
        let forceDirectionY = dy / distance;
        let maxDistance = mouse.radius;
        let force = (maxDistance - distance) / maxDistance;
        let directionX = forceDirectionX * force * this.density;
        let directionY = forceDirectionY * force * this.density;

        if(distance < mouse.radius){
            this.x -= directionX;
            this.y -= directionY;
        }else{
            if(this.x !== this.baseX){
                let dx = this.x - this.baseX;
                this.x -= dx/10;
            }
            if(this.y !== this.baseY){
                let dy = this.y - this.baseY;
                this.y -= dy/10;
            }
        }
    }
}

function init() {
    particleArray =[];
    for( let y = 0, y2 = textCoordinates.height; y < y2; y++);{
        for(let x = 0, x2 =textCoordinates.height; x < x2; x++);{
            if(textCoordinates.data[( y * 4 * textCoordinates.width) + (x * 4) + 3] > 128 ){
                let positionX = x + adjustX;
                let positionY = y + adjustY;
                particleArray.push(new Particle(positionX * 20, positionY * 20));
            }
        }
    }
}
init();
console.log(particleArray);

function animate(){
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    for( let i =0; i < particleArray.length; i++){
        particleArray[i].draw();
        particleArray[i].update();
    }
    //connect();
    requestAnimationFrame(animate);
}
animate();

function connect(){
    let opacityValue = 1;
    for(let a = 0; a < particleArray.length; a++){
        for(let b = 0; b < particleArray.length; b++){
            //let dx = mouse.x - this.x;
            //let dy = mouse.y - this.y;
            //let distance = Math.sqrt(dx * dx + dy * dy);
            let dx = particleArray[a].x - particleArray[b].x;
            let dy = particleArray[a].y - particleArray[b].y;
            let distance = Math.sqrt(dx * dx + dy * dy);
            opacityValue = 1 - (distance/50);
            ctx.strokeStyle = 'rgba(225, 225, 225, ' + opacityValue + ')';
            if (distance < 50){

                ctx.lineWidth = 2;
                ctx.beginPath();
                ctx.moveTo(particleArray[a].x, particleArray[a].y);
                ctx.lineTo(particleArray[b].x, particleArray[b].y);
                ctx.stroke;
            }
        }
    }
}